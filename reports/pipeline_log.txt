Starting clinical trial data pipeline...
[INFO] Running notebook: q4_exploration.ipynb
[NbConvertApp] Converting notebook q4_exploration.ipynb to notebook
[NbConvertApp] Writing 77087 bytes to q4_exploration.ipynb
[SUCCESS] Completed: q4_exploration.ipynb
[INFO] Running notebook: q5_missing_data.ipynb
[NbConvertApp] Converting notebook q5_missing_data.ipynb to notebook
[NbConvertApp] Writing 85053 bytes to q5_missing_data.ipynb
[SUCCESS] Completed: q5_missing_data.ipynb
[INFO] Running notebook: q6_transformation.ipynb
[NbConvertApp] Converting notebook q6_transformation.ipynb to notebook
[NbConvertApp] Writing 16432 bytes to q6_transformation.ipynb
[SUCCESS] Completed: q6_transformation.ipynb
[INFO] Running notebook: q7_aggregation.ipynb
[NbConvertApp] Converting notebook q7_aggregation.ipynb to notebook
Traceback (most recent call last):
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/codespace/.local/bin/jupyter-nbconvert", line 8, in <module>
    sys.exit(main())
             ^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/application.py", line 284, in launch_instance
    super().launch_instance(argv=argv, **kwargs)
  File "/home/codespace/.local/lib/python3.12/site-packages/traitlets/config/application.py", line 1075, in launch_instance
    app.start()
  File "/home/codespace/.local/lib/python3.12/site-packages/nbconvert/nbconvertapp.py", line 420, in start
    self.convert_notebooks()
  File "/home/codespace/.local/lib/python3.12/site-packages/nbconvert/nbconvertapp.py", line 597, in convert_notebooks
    self.convert_single_notebook(notebook_filename)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbconvert/nbconvertapp.py", line 563, in convert_single_notebook
    output, resources = self.export_single_notebook(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbconvert/nbconvertapp.py", line 487, in export_single_notebook
    output, resources = self.exporter.from_filename(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbconvert/exporters/exporter.py", line 201, in from_filename
    return self.from_file(f, resources=resources, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbconvert/exporters/exporter.py", line 220, in from_file
    return self.from_notebook_node(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbconvert/exporters/notebook.py", line 36, in from_notebook_node
    nb_copy, resources = super().from_notebook_node(nb, resources, **kw)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbconvert/exporters/exporter.py", line 154, in from_notebook_node
    nb_copy, resources = self._preprocess(nb_copy, resources)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbconvert/exporters/exporter.py", line 353, in _preprocess
    nbc, resc = preprocessor(nbc, resc)
                ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbconvert/preprocessors/base.py", line 48, in __call__
    return self.preprocess(nb, resources)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbconvert/preprocessors/execute.py", line 103, in preprocess
    self.preprocess_cell(cell, resources, index)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbconvert/preprocessors/execute.py", line 124, in preprocess_cell
    cell = self.execute_cell(cell, index, store_history=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# TODO: Intervention group comparisons
dropout_candidates = [c for c in df.columns if "dropout" in c.lower()]

DROPOUT_COL = None
for c in (dropout_candidates + ["dropout_status", "dropout", "dropped_out", "dropout_flag", "dropoutstatus"]):
    if c in df.columns:
        DROPOUT_COL = c
        break

if DROPOUT_COL is not None:
    s = df[DROPOUT_COL].astype(str).str.strip().str.lower()
    s = (
        s.replace({
            "yes": "dropped out", "true": "dropped out", "1": "dropped out",
            "no": "stayed",       "false": "stayed",       "0": "stayed"
        })
    )
    df["dropout_status_norm"] = s.str.title()
    print(f"Using dropout column: {DROPOUT_COL} -> normalized to 'dropout_status_norm'")
else:
    print("No dropout-like column found. Candidates:", dropout_candidates)

cvd_rate = (
    df.groupby("intervention_group", dropna=False)["outcome_cvd"]
      .mean(numeric_only=True)
      .reset_index(name="mean_cvd_rate")
)

adherence = (
    df.groupby("intervention_group", dropna=False)["adherence_pct"]
      .mean(numeric_only=True)
      .reset_index(name="mean_adherence_pct")
)

if "dropout_status_norm" in df.columns:
    dropout_table = pd.crosstab(
        df["intervention_group"], df["dropout_status_norm"], dropna=False
    )
else:
    dropout_table = None

intervention_summary = cvd_rate.merge(adherence, on="intervention_group")
display(intervention_summary)
if dropout_table is not None:
    display(dropout_table)

------------------

----- stdout -----
Using dropout column: dropout -> normalized to 'dropout_status_norm'
------------------

[31m---------------------------------------------------------------------------[39m
[31mTypeError[39m                                 Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[6][39m[32m, line 25[39m
[32m     20[39m [38;5;28;01melse[39;00m:
[32m     21[39m     [38;5;28mprint[39m([33m"[39m[33mNo dropout-like column found. Candidates:[39m[33m"[39m, dropout_candidates)
[32m     23[39m cvd_rate = (
[32m     24[39m     [43mdf[49m[43m.[49m[43mgroupby[49m[43m([49m[33;43m"[39;49m[33;43mintervention_group[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43mdropna[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m[43m[[49m[33;43m"[39;49m[33;43moutcome_cvd[39;49m[33;43m"[39;49m[43m][49m
[32m---> [39m[32m25[39m [43m      [49m[43m.[49m[43mmean[49m[43m([49m[43mnumeric_only[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[32m     26[39m       .reset_index(name=[33m"[39m[33mmean_cvd_rate[39m[33m"[39m)
[32m     27[39m )
[32m     29[39m adherence = (
[32m     30[39m     df.groupby([33m"[39m[33mintervention_group[39m[33m"[39m, dropna=[38;5;28;01mFalse[39;00m)[[33m"[39m[33madherence_pct[39m[33m"[39m]
[32m     31[39m       .mean(numeric_only=[38;5;28;01mTrue[39;00m)
[32m     32[39m       .reset_index(name=[33m"[39m[33mmean_adherence_pct[39m[33m"[39m)
[32m     33[39m )
[32m     35[39m [38;5;28;01mif[39;00m [33m"[39m[33mdropout_status_norm[39m[33m"[39m [38;5;129;01min[39;00m df.columns:

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pandas/core/groupby/groupby.py:2459[39m, in [36mGroupBy.mean[39m[34m(self, numeric_only, engine, engine_kwargs)[39m
[32m   2452[39m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m._numba_agg_general(
[32m   2453[39m         grouped_mean,
[32m   2454[39m         executor.float_dtype_mapping,
[32m   2455[39m         engine_kwargs,
[32m   2456[39m         min_periods=[32m0[39m,
[32m   2457[39m     )
[32m   2458[39m [38;5;28;01melse[39;00m:
[32m-> [39m[32m2459[39m     result = [38;5;28;43mself[39;49m[43m.[49m[43m_cython_agg_general[49m[43m([49m
[32m   2460[39m [43m        [49m[33;43m"[39;49m[33;43mmean[39;49m[33;43m"[39;49m[43m,[49m
[32m   2461[39m [43m        [49m[43malt[49m[43m=[49m[38;5;28;43;01mlambda[39;49;00m[43m [49m[43mx[49m[43m:[49m[43m [49m[43mSeries[49m[43m([49m[43mx[49m[43m,[49m[43m [49m[43mcopy[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m[43m.[49m[43mmean[49m[43m([49m[43mnumeric_only[49m[43m=[49m[43mnumeric_only[49m[43m)[49m[43m,[49m
[32m   2462[39m [43m        [49m[43mnumeric_only[49m[43m=[49m[43mnumeric_only[49m[43m,[49m
[32m   2463[39m [43m    [49m[43m)[49m
[32m   2464[39m     [38;5;28;01mreturn[39;00m result.__finalize__([38;5;28mself[39m.obj, method=[33m"[39m[33mgroupby[39m[33m"[39m)

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pandas/core/groupby/groupby.py:1976[39m, in [36mGroupBy._cython_agg_general[39m[34m(self, how, alt, numeric_only, min_count, **kwargs)[39m
[32m   1964[39m [38;5;129m@final[39m
[32m   1965[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m_cython_agg_general[39m(
[32m   1966[39m     [38;5;28mself[39m,
[32m   (...)[39m[32m   1973[39m     [38;5;66;03m# Note: we never get here with how="ohlc" for DataFrameGroupBy;[39;00m
[32m   1974[39m     [38;5;66;03m#  that goes through SeriesGroupBy[39;00m
[32m-> [39m[32m1976[39m     data = [38;5;28;43mself[39;49m[43m.[49m[43m_get_data_to_aggregate[49m[43m([49m[43mnumeric_only[49m[43m=[49m[43mnumeric_only[49m[43m,[49m[43m [49m[43mname[49m[43m=[49m[43mhow[49m[43m)[49m
[32m   1978[39m     [38;5;28;01mdef[39;00m[38;5;250m [39m[34marray_func[39m(values: ArrayLike) -> ArrayLike:
[32m   1979[39m         [38;5;28;01mtry[39;00m:

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pandas/core/groupby/generic.py:168[39m, in [36mSeriesGroupBy._get_data_to_aggregate[39m[34m(self, numeric_only, name)[39m
[32m    165[39m [38;5;28;01mif[39;00m numeric_only [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m is_numeric_dtype(ser.dtype):
[32m    166[39m     [38;5;66;03m# GH#41291 match Series behavior[39;00m
[32m    167[39m     kwd_name = [33m"[39m[33mnumeric_only[39m[33m"[39m
[32m--> [39m[32m168[39m     [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m(
[32m    169[39m         [33mf[39m[33m"[39m[33mCannot use [39m[38;5;132;01m{[39;00mkwd_name[38;5;132;01m}[39;00m[33m=True with [39m[33m"[39m
[32m    170[39m         [33mf[39m[33m"[39m[38;5;132;01m{[39;00m[38;5;28mtype[39m([38;5;28mself[39m).[34m__name__[39m[38;5;132;01m}[39;00m[33m.[39m[38;5;132;01m{[39;00mname[38;5;132;01m}[39;00m[33m and non-numeric dtypes.[39m[33m"[39m
[32m    171[39m     )
[32m    172[39m [38;5;28;01mreturn[39;00m single

[31mTypeError[39m: Cannot use numeric_only=True with SeriesGroupBy.mean and non-numeric dtypes.

[ERROR] Execution failed for q7_aggregation.ipynb. Stopping pipeline.
